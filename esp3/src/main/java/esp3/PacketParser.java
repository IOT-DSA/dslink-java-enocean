package esp3;

import esp3.message.CRC;
import esp3.message.Packet;
import esp3.message.PacketType;
import esp3.message.incoming.RadioPacket;
import esp3.message.incoming.RemanCommandPacket;
import esp3.message.incoming.ResponsePacket;
import com.serotonin.io.StreamUtils;
import com.serotonin.messaging2.IncomingMessage;
import com.serotonin.messaging2.MessageParseException;
import com.serotonin.messaging2.MessageParser;
import com.serotonin.util.queue.ByteQueue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PacketParser implements MessageParser {
    private static final Logger logger =  LoggerFactory.getLogger(PacketParser.class.getName());

    private int pos;
    private int dataLength;
    private int optionalLength;
    private int packetTypeId;
    private PacketType packetType;
    private byte headerCrc;
    private byte headerCalc;
    private byte dataCrc;
    private byte dataCalc;
    private final ByteQueue data = new ByteQueue();
    private final ByteQueue optional = new ByteQueue();

    @Override
    public IncomingMessage parseMessage(ByteQueue queue) throws MessageParseException {
        if (logger.isDebugEnabled()) {
            byte[] dump = queue.peekAll();
            logger.debug(StreamUtils.dumpArrayHex(dump, 0, dump.length));
        }

        // Find a start indicator.
        pos = queue.indexOf(Packet.START);

        if (pos == -1) {
            // Didn't find nothin. Discard all and return null.
            queue.pop(queue.size());
            return null;
        }

        // Try to parse out the message. Ignore everything up to the start indicator.
        if (pos > 0)
            queue.pop(pos);

        if (queue.size() < 7)
            // Make sure there is a minimum amount of data to read.
            return null;

        queue.mark();

        // Drop the start indicator.
        queue.pop();

        // Get the data length.
        dataLength = queue.popU2B();

        // Get the optional data length
        optionalLength = queue.popU1B();

        // The queue must have at least the sum of dataLength, optionalLength, and 3 (packet type and 2 CRCs).
        // Otherwise, the message is incomplete and should be ignored for now.
        if (queue.size() < dataLength + optionalLength + 3) {
            queue.reset();
            return null;
        }

        // Get the packet type.
        packetTypeId = queue.popU1B();
        packetType = PacketType.forId(packetTypeId);
        if (packetType == null)
            return parseException(queue, "Invalid packet type id: " + packetTypeId);

        // Check the header CRC
        headerCrc = queue.pop();
        headerCalc = CRC.calculateCRC(dataLength, optionalLength, packetTypeId);
        if (headerCrc != headerCalc)
            return parseException(queue, "Invalid header CRC: expected " + headerCalc + ", received " + headerCrc);

        // Get the data.
        data.clear();
        data.push(queue, dataLength);

        // Get the optional data
        optional.clear();
        optional.push(queue, optionalLength);

        // Check the data CRC
        dataCrc = queue.pop();
        dataCalc = CRC.calculateCRC(data, optional);
        if (dataCrc != dataCalc)
            return parseException(queue, "Invalid data CRC: expected " + dataCalc + ", received " + dataCrc);

        IncomingMessage result;

        //        System.out.println("PacketType: " + packetTypeId);
        if (packetType == PacketType.radio)
            result = new RadioPacket(data, optional);
        else if (packetType == PacketType.response)
            result = new ResponsePacket(data, optional);
        //        else if (packetType == PacketType.radioSubTel)
        //            result = new RadioSubTelPacket(data, optional);
        //        else if (packetType == PacketType.event)
        //            result = new EventPacket(data);
        else if (packetType == PacketType.remoteManCommand) {
            result = RemanCommandPacket.parse(data, optional);
        }
        //        radioMessage(9), //
        //        radioAdvanced(10), //
        else
            return parseException(queue, "Unhandled packet type: " + packetType);

        return result;
    }

    private IncomingMessage parseException(ByteQueue queue, String message) throws MessageParseException {
        queue.reset();
        // Pop off the start indicator. There may be another one in the content that would otherwise be discarded.
        queue.pop();
        throw new MessageParseException(message);
    }

    //    public static void main(String[] args) {
    //        PacketParser parser = new PacketParser();
    //
    //        //        int[][] msgs = dualRocker;
    //        //        int[][] msgs = motionSensor;
    //        //        int[][] msgs = doorContact;
    //        int[][] msgs = doorContactLearn;
    //
    //        for (int[] a : msgs) {
    //            byte[] b = toBytes(a);
    //            IncomingMessage im = parser.parseMessage(new ByteQueue(b));
    //            if (im instanceof RadioPacket) {
    //                RadioPacket p = (RadioPacket) im;
    //                System.out.println(StreamUtils.dumpHex(p.getUserData()));
    //            }
    //        }
    //    }
    //
    //    private static byte[] toBytes(int[] a) {
    //        byte[] b = new byte[a.length];
    //        for (int i = 0; i < a.length; i++)
    //            b[i] = (byte) a[i];
    //        return b;
    //    }
    //
    //    private static int[][] dualRocker = {
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x30, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xb0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x36, 0x0, (byte) 0xcf },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x0, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xa0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x34, 0x0, 0x53 },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x10, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xb0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x2a, 0x0, (byte) 0x9a },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x0, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xa0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x2a, 0x0, (byte) 0xd2 },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x70, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xb0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x2a, 0x0, (byte) 0x9f },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x0, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xa0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x29, 0x0, (byte) 0xed },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x50, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xb0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x29, 0x0, 0x5e },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, (byte) 0xf6, 0x0, 0x0, 0x25, 0x60, (byte) 0xe9, (byte) 0xa0, 0x1,
    //                    (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x29, 0x0, (byte) 0xed },
    //
    //    };
    //
    //    private static int[][] motionSensor = {
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x5f, 0x2b, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x2e, 0x0, 0x66 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x5f, 0x2b, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x2e, 0x0, 0x66 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x60, 0x2a, 0x0, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff, 0xff,
    //                    0xff, 0xff, 0x34, 0x0, 0x48 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x69, 0x2b, 0x0, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff, 0xff,
    //                    0xff, 0xff, 0x2e, 0x0, 0x3a },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x68, 0x2c, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x30, 0x0, 0x8b },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x6e, 0x2b, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x3a, 0x0, 0x7 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x6d, 0x2c, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x33, 0x0, 0xbe },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x6e, 0x2e, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x34, 0x0, 0xbe },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x6f, 0x29, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x39, 0x0, 0x57 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x70, 0x2c, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x30, 0x0, 0xbb },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x71, 0x2a, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x37, 0x0, 0x65 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x70, 0x2c, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x33, 0x0, 0x84 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x72, 0x28, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x30, 0x0, 0x65 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x72, 0x2b, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x34, 0x0, 0xe9 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x72, 0x2a, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x34, 0x0, 0x5c },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x73, 0x29, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x34, 0x0, 0x86 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x74, 0x2c, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x30, 0x0, 0xb3 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x75, 0x28, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x36, 0x0, 0x15 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x75, 0x29, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x2e, 0x0, 0x5f },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x76, 0x2a, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x34, 0x0, 0x54 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x77, 0x29, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x2d, 0x0, 0x64 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x77, 0x29, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x36, 0x0, 0xa4 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x78, 0x2a, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x3a, 0x0, 0x9e },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x78, 0x2a, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff,
    //                    0xff, 0xff, 0xff, 0x33, 0x0, 0x23 },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x78, 0x0, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff, 0xff,
    //                    0xff, 0xff, 0x39, 0x0, 0xbd },
    //            { 0x55, 0x0, 0xa, 0x7, 0x1, 0xeb, 0xa5, 0x78, 0x2, 0xff, 0x9, 0x0, 0x88, 0x64, 0x61, 0x80, 0x1, 0xff, 0xff,
    //                    0xff, 0xff, 0x2a, 0x0, 0xb8 },
    //
    //    };
    //
    //    private static int[][] doorContact = {
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x9, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x31,
    //                    0x0, 0x23 },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x8, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x2f,
    //                    0x0, 0x36 },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x9, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x2f,
    //                    0x0, 0xa2 },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x8, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x31,
    //                    0x0, 0xb7 },
    //
    //    };
    //
    //    private static int[][] doorContactLearn = {
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x0, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x2f,
    //                    0x0, 0x8a },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x0, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x2f,
    //                    0x0, 0x8a },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x0, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x2f,
    //                    0x0, 0x8a },
    //            { 0x55, 0x0, 0x7, 0x7, 0x1, 0x7a, 0xd5, 0x9, 0x0, 0x83, 0x52, 0x42, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x38,
    //                    0x0, 0x9e },
    //
    //    };
    //    //                  {55,0,a,7,1,eb,a5,83,36,ff,f,0,81,ef,d6,0,1,ff,ff,ff,ff,31,0,70]
    //
}
